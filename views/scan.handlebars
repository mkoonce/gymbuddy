
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <meta name="description" content="">
  <meta name="author" content="">
  <link rel="shortcut icon" href="assets/ico/favicon.ico">

  <title>GymBuddy</title>

  <!-- Bootstrap core CSS -->
  <link href="css/bootstrap.min.css" rel="stylesheet">

  <!-- Just for debugging purposes. Don't actually copy this line! -->
  <!--[if lt IE 9]><script src="../../assets/js/ie8-responsive-file-warning.js"></script><![endif]-->

  <!-- HTML5 shim and Respond.js IE8 support of HTML5 elements and media queries -->
    <!--[if lt IE 9]>
      <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
      <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
      <![endif]-->

      <!-- Custom styles for this template -->
      <link href="css/carousel.css" rel="stylesheet">
      <link href="css/workout.css" rel="stylesheet">
      <link href="css/scan.css" rel="stylesheet">

      <script type="text/javascript" src="js/grid.js"></script>
      <script type="text/javascript" src="js/version.js"></script>
      <script type="text/javascript" src="js/detector.js"></script>
      <script type="text/javascript" src="js/formatinf.js"></script>
      <script type="text/javascript" src="js/errorlevel.js"></script>
      <script type="text/javascript" src="js/bitmat.js"></script>
      <script type="text/javascript" src="js/datablock.js"></script>
      <script type="text/javascript" src="js/bmparser.js"></script>
      <script type="text/javascript" src="js/datamask.js"></script>
      <script type="text/javascript" src="js/rsdecoder.js"></script>
      <script type="text/javascript" src="js/gf256poly.js"></script>
      <script type="text/javascript" src="js/gf256.js"></script>
      <script type="text/javascript" src="js/decoder.js"></script>
      <script type="text/javascript" src="js/qrcode.js"></script>
      <script type="text/javascript" src="js/findpat.js"></script>
      <script type="text/javascript" src="js/alignpat.js"></script>
      <script type="text/javascript" src="js/databr.js"></script>

    </head>
<!-- NAVBAR
  ================================================== -->
  <body>
    <div class="navbar-wrapper">
      <div class="container">

        <div class="navbar navbar-default navbar-static-top" role="navigation">
          <div class="container">
            <div class="navbar-header">
              <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                <span class="sr-only">Toggle navigation</span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
                <span class="icon-bar"></span>
              </button>
              <a class="navbar-brand" href="/">GymBuddy</a>
            </div>
            <div class="navbar-collapse collapse">
              <ul class="nav navbar-nav">
                <li><a href="/">Home</a></li>
                <li><a href="/profile">My Profile</a></li>
                <li><a href="/journal">My Journal</a></li>
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>


    <div class="container marketing">
      <div class="row" style="margin-top:-20px">
        <div class="col-lg-4" style="margin-top:100px">
          <div class="container" style="width:300px">
            <ol class="breadcrumb">
              <li class="active">Scan</li>
            </ol>
          </div>
          <div class="container">
            <h2> Barcode Scanner </h2>
            <form id="scanForm" role="form">
              <div class="fileUpload btn btn-primary">
                <span>Take a photo of a Barcode</span>
                <input id="Take-Picture" type="file" class="upload" capture="camera" id="cameraInput" name="cameraInput" align="center" class="form-control"/>
              </div>
              <img width="250" height="200" src="" alt="" id="picture">
            </form>  
          </div>
<!--           <div class="container">
            <div id="fileDisplayArea" width="300px"></div> 
          </div> -->
          <div class="container" style="margin-top:15px">
            <div id="submitBtnArea" width="300px"></div> 
          </div>         
        </div><!-- /.col-lg-4 -->
      </div><!-- /.row -->
    </div><!-- /.container -->
    <script type="text/javascript">
          var takePicture = document.querySelector("#Take-Picture"),
          showPicture = document.querySelector("#picture");
          Result = document.querySelector("#textbit");
          Canvas = document.createElement("canvas");
          Canvas.width=640;
          Canvas.height=480;
          var resultArray = [];
          ctx = Canvas.getContext("2d");
          var workerCount = 0;
          function receiveMessage(e) {
            if(e.data.success === "log") {
              console.log(e.data.result);
              return;
            }
            workerCount--;
            if(e.data.success){
              var tempArray = e.data.result;
              for(var i = 0; i < tempArray.length; i++) {
                if(resultArray.indexOf(tempArray[i]) == -1) {
                  resultArray.push(tempArray[i]);
                }
              }
               // Result.innerHTML=resultArray.join("<br />");
               var button = document.createElement("a");
               button.setAttribute("class", "btn btn-lg btn-primary"); 
               button.setAttribute("role", "button"); 
               button.setAttribute("href", e.data.result); 
               console.log(e);
               button.innerHTML = "Submit";
               var submitBtnArea = document.getElementById('submitBtnArea');
               submitBtnArea.appendChild(button);
            }else{
              if(resultArray.length === 0 && workerCount === 0) {
                Result.innerHTML="Decoding failed.";
              }
            }
          }
          var DecodeWorker = new Worker("/js/DecoderWorker.js");
          var RightWorker = new Worker("/js/DecoderWorker.js");
          var LeftWorker = new Worker("/js/DecoderWorker.js");
          var FlipWorker = new Worker("/js/DecoderWorker.js");
          DecodeWorker.onmessage = receiveMessage;
          RightWorker.onmessage = receiveMessage;
          LeftWorker.onmessage = receiveMessage;
          FlipWorker.onmessage = receiveMessage;
          if(takePicture && showPicture) {
            takePicture.onchange = function (event) {
              var files = event.target.files
              if (files && files.length > 0) {
                file = files[0];
                console.log(file);
                try {
                  var URL = window.URL || window.webkitURL;
                  var imgURL = URL.createObjectURL(file);
                  showPicture.src = imgURL;
                  URL.revokeObjectURL(imgURL);
                  DecodeBar()
                }
                catch (e) {
                  try {
                    var fileReader = new FileReader();
                    fileReader.onload = function (event) {
                      showPicture.src = event.target.result;
                    };
                    fileReader.readAsDataURL(file);
                    DecodeBar()
                  }
                  catch (e) {
                    // Result.innerHTML = "Neither createObjectURL or FileReader are supported";
                  }
                }
              }
            };
          }
          function DecodeBar(){
            showPicture.onload = function(){
              //showPicture
              drawImageIOSFix(ctx, showPicture, 0, 0, showPicture.width, showPicture.height,0,0,Canvas.width,Canvas.height);
              resultArray = [];
              workerCount = 4;
              // Result.innerHTML="";
              DecodeWorker.postMessage({pixels: ctx.getImageData(0,0,Canvas.width,Canvas.height).data, width: Canvas.width, height: Canvas.height, cmd: "normal"});
              RightWorker.postMessage({pixels: ctx.getImageData(0,0,Canvas.width,Canvas.height).data, width: Canvas.width, height: Canvas.height, cmd: "right"});
              LeftWorker.postMessage({pixels: ctx.getImageData(0,0,Canvas.width,Canvas.height).data, width: Canvas.width, height: Canvas.height, cmd: "left"});
              FlipWorker.postMessage({pixels: ctx.getImageData(0,0,Canvas.width,Canvas.height).data, width: Canvas.width, height: Canvas.height, cmd: "flip"});
            }
          }

            /**
             * Detecting vertical squash in loaded image.
             * Fixes a bug which squash image vertically while drawing into canvas for some images.
             * This is a bug in iOS6 devices. This function from https://github.com/stomita/ios-imagefile-megapixel
             * 
             */
            function detectVerticalSquash(img) {
                var iw = img.naturalWidth, ih = img.naturalHeight;
                var canvas = document.createElement('canvas');
                canvas.width = 1;
                canvas.height = ih;
                var ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0);
                var data = ctx.getImageData(0, 0, 1, ih).data;
                // search image edge pixel position in case it is squashed vertically.
                var sy = 0;
                var ey = ih;
                var py = ih;
                while (py > sy) {
                    var alpha = data[(py - 1) * 4 + 3];
                    if (alpha === 0) {
                        ey = py;
                    } else {
                        sy = py;
                    }
                    py = (ey + sy) >> 1;
                }
                var ratio = (py / ih);
                return (ratio===0)?1:ratio;
            }

            /**
             * A replacement for context.drawImage
             * (args are for source and destination).
             */
            function drawImageIOSFix(ctx, img, sx, sy, sw, sh, dx, dy, dw, dh) {
                var vertSquashRatio = detectVerticalSquash(img);
                console.log(vertSquashRatio);
             // Works only if whole image is displayed:
             // ctx.drawImage(img, sx, sy, sw, sh, dx, dy, dw, dh / vertSquashRatio);
             // The following works correct also when only a part of the image is displayed:
                ctx.drawImage(img, sx * vertSquashRatio, sy * vertSquashRatio, 
                                   sw * vertSquashRatio, sh * vertSquashRatio, 
                                   dx, dy, dw, dh );
            }
        </script>

    <!-- Bootstrap core JavaScript
    ================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->
    <script src="https://code.jquery.com/jquery-1.10.2.min.js"></script>
    <script src="js/bootstrap.min.js"></script>
    <!-- <script src="js/scan.js"></script> -->
    <script src="js/pixastic.custom.js"></script>
  </body>
  </html>
